#!/bin/sh
#

WPA_SUPPLICANT_CONF=/var/etc/wpa_supplicant.conf
HOSTAPD_CONF=/var/etc/hostapd.conf
DEFAULT_LANIP=192.168.111.1
WAN_CONFIG_FILE=/var/etc/ifcfg-wan
LAN_CONFIG_FILE=/var/etc/ifcfg-lan
WLAN_CONFIG_FILE=/var/etc/ifcfg-wlan0
WAN=
LAN=

usage() {
	echo "Usage:"
	echo "  $0 config"
	echo "  $0 dhcp"
	echo "  $0 <wan|lan>"
	echo "  $0 get <wan|lan|wlan0> OPTION"
	echo "  $0 set <wan|lan|wlan0> OPTION VALUE"
	echo
	echo "Options:"
	echo "  IPADDR"
	echo "  NETMASK"
	echo "  DEFAULT_GATEWAY"
	echo "  BOOTPROTO"
}

lan_ip() {
	LAN_IP=`edcfg $LAN_CONFIG_FILE get IPADDR`
	if [ -z "$LAN_IP" ]; then
		LAN_IP=$DEFAULT_LANIP
	fi
	echo $LAN_IP
}

# USage: subnet_part <IPADDR>
subnet_part() {
	echo $1 | cut -d'.' -f1-3
}

print_wan_config() {
    iface=$WAN
    cfg_file=$1
    echo "auto $iface"
    if [ "`edcfg $cfg_file get BOOTPROTO`" = "static" ]; then
        echo "iface $iface inet static"
        echo "  address `edcfg $cfg_file get IPADDR`"
        MASK=`edcfg $cfg_file get NETMASK`
        test -n "$MASK" && echo "  netmask $MASK"
        GW=`edcfg $cfg_file get DEFAULT_GATEWAY`
        test -n "$GW"   && echo "  gateway $GW"
        echo "  pre-up static-dns-config.sh"
    else
        echo "iface $iface inet dhcp"
    fi
}

print_hostap_config() {
    echo "  pre-up hostapd $HOSTAPD_CONF -B"
    echo "  pre-up wifi_led.sh 1"
    echo "  down wifi_down.sh"
}

config() {
    LAN_IP=`lan_ip`
    SUBNET_PART=`subnet_part $LAN_IP`

    echo "auto lo"
    echo "iface lo inet loopback"
    echo
    # TODO check eth1 and setup bridge
    enable_wireless=`edcfg $WLAN_CONFIG_FILE get ENABLE_WIRELESS`
    get_wanlan
    if [ "$WAN" = "wlan0" ]; then
        if [ "$enable_wireless" = 1 ]; then
            print_wan_config $WLAN_CONFIG_FILE
            echo "  pre-up wpa_supplicant -Dnl80211 -iwlan0 -c $WPA_SUPPLICANT_CONF -B"
            echo "  pre-up wifi_led.sh 1"
            # Killing wpa_supplicant should be in down section,
            # coz post-down cannot be executed if udhcpc didnt get ip
            echo "  down killall wpa_supplicant"
            echo "  post-down wifi_down.sh"
            echo "  udhcpc_opts -b"
        fi
    else
        print_wan_config $WAN_CONFIG_FILE
        [ "$WAN" = "br0" ] && print_hostap_config
    fi
    echo

    if [ "$LAN" != "wlan0" -o "$enable_wireless" = "1" ] && [ "$WAN" != "br0" -a -n "$LAN" ]; then
        echo "auto $LAN"
        echo "iface $LAN inet static"
        echo "  address $LAN_IP"
        echo "  netmask 255.255.255.0"
        echo "  pre-up iptables -t nat -A POSTROUTING -s $SUBNET_PART.0/24 -o $WAN -j MASQUERADE"
        echo "  post-down iptables -t nat -D POSTROUTING -s $SUBNET_PART.0/24 -o $WAN -j MASQUERADE || true"
        [ "$LAN" = "wlan0" ] && print_hostap_config
        echo
    fi
}

get_wanlan() {
    WAN=`edcfg $WAN_CONFIG_FILE get IFACE`;
    if [ "$WAN" ]; then
        LAN=`edcfg $LAN_CONFIG_FILE get IFACE`;
    else
        # legacy
        if [ "`edcfg $WLAN_CONFIG_FILE get WAN_MODE`" = 1 ]; then
            WAN=wlan0
            LAN=eth0
        else
            WAN=eth0
            LAN=wlan0
        fi
    fi
}

dhcp() {
	get_wanlan

	LAN_IP=`lan_ip`
	SUBNET_PART=`subnet_part $LAN_IP`
	HOST_ADDR=${LAN_IP##*.}
	if [ "$HOST_ADDR" -gt "128" ]; then
		RANGE_START=${SUBNET_PART}.10
		RANGE_END=${SUBNET_PART}.$((${HOST_ADDR}-1))
	else
		RANGE_START=${SUBNET_PART}.$((${HOST_ADDR}+1))
		RANGE_END=${SUBNET_PART}.250
	fi

	DNS=`grep nameserver /etc/resolv.conf | cut -d' ' -f2 | tr '\n' ','`
	# Remove trailing comma
	DNS=${DNS%?}
	if [ -n "$DNS" ]; then
		DNS="  option domain-name-servers $DNS;"
	fi

	cat <<DHCP_CONF_END
ddns-update-style none;
default-lease-time 14400;
subnet $SUBNET_PART.0 netmask 255.255.255.0 {
  range $RANGE_START $RANGE_END;
  option routers $LAN_IP;
$DNS
}
DHCP_CONF_END
}

case "$1" in
	get)
		case "$3" in
			subnet)
				SUBNET_PART=`subnet_part $(lan_ip)`
				echo "$SUBNET_PART.0/24"
				;;
			*)
				edcfg /var/etc/ifcfg-$2 get $3
				;;
		esac
		exit $?
		;;
	set)
		edcfg /var/etc/ifcfg-$2 set $3 $4
		exit $?
		;;
	config)
		config
		;;
	lan)
		get_wanlan
		echo $LAN
		;;
	wan)
		get_wanlan
		echo $WAN
		;;
	dhcp)
		dhcp
		;;
	*)
		usage
		;;
esac
